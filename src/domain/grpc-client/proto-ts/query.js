// @generated by protobuf-ts 2.9.3 with parameter output_javascript_es2020
// @generated from protobuf file "query.proto" (syntax proto3)
// tslint:disable
//
//
// query.proto
//
// Contains RPC messages and interface specific to the Query Service.
//
// since: February, 2024
// version: 1.2.0
//
//
// @generated by protobuf-ts 2.9.3 with parameter output_javascript_es2020
// @generated from protobuf file "query.proto" (syntax proto3)
// tslint:disable
//
//
// query.proto
//
// Contains RPC messages and interface specific to the Query Service.
//
// since: February, 2024
// version: 1.2.0
//
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SamplingClock } from "./common";
import { DataColumn } from "./common";
import { EventMetadata } from "./common";
import { Attribute } from "./common";
import { DataTimestamps } from "./common";
import { ExceptionalResult } from "./common";
import { Timestamp } from "./common";
/**
 * @generated from protobuf enum QueryDataRequest.CursorOperation.CursorOperationType
 */
export var QueryDataRequest_CursorOperation_CursorOperationType;
(function (QueryDataRequest_CursorOperation_CursorOperationType) {
    /**
     * Specifies that the next query response message should be sent.
     *
     * @generated from protobuf enum value: CURSOR_OP_NEXT = 0;
     */
    QueryDataRequest_CursorOperation_CursorOperationType[QueryDataRequest_CursorOperation_CursorOperationType["CURSOR_OP_NEXT"] = 0] = "CURSOR_OP_NEXT";
})(QueryDataRequest_CursorOperation_CursorOperationType || (QueryDataRequest_CursorOperation_CursorOperationType = {}));
// @generated message type with reflection information, may provide speed optimized methods
class QueryDataRequest$Type extends MessageType {
    constructor() {
        super("QueryDataRequest", [
            { no: 1, name: "querySpec", kind: "message", oneof: "request", T: () => QueryDataRequest_QuerySpec },
            { no: 2, name: "cursorOp", kind: "message", oneof: "request", T: () => QueryDataRequest_CursorOperation }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QueryDataRequest.QuerySpec querySpec */ 1:
                    message.request = {
                        oneofKind: "querySpec",
                        querySpec: QueryDataRequest_QuerySpec.internalBinaryRead(reader, reader.uint32(), options, message.request.querySpec)
                    };
                    break;
                case /* QueryDataRequest.CursorOperation cursorOp */ 2:
                    message.request = {
                        oneofKind: "cursorOp",
                        cursorOp: QueryDataRequest_CursorOperation.internalBinaryRead(reader, reader.uint32(), options, message.request.cursorOp)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* QueryDataRequest.QuerySpec querySpec = 1; */
        if (message.request.oneofKind === "querySpec")
            QueryDataRequest_QuerySpec.internalBinaryWrite(message.request.querySpec, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* QueryDataRequest.CursorOperation cursorOp = 2; */
        if (message.request.oneofKind === "cursorOp")
            QueryDataRequest_CursorOperation.internalBinaryWrite(message.request.cursorOp, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryDataRequest
 */
export const QueryDataRequest = new QueryDataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDataRequest_QuerySpec$Type extends MessageType {
    constructor() {
        super("QueryDataRequest.QuerySpec", [
            { no: 1, name: "beginTime", kind: "message", T: () => Timestamp },
            { no: 2, name: "endTime", kind: "message", T: () => Timestamp },
            { no: 3, name: "pvNames", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pvNames = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Timestamp beginTime */ 1:
                    message.beginTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.beginTime);
                    break;
                case /* Timestamp endTime */ 2:
                    message.endTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endTime);
                    break;
                case /* repeated string pvNames */ 3:
                    message.pvNames.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* Timestamp beginTime = 1; */
        if (message.beginTime)
            Timestamp.internalBinaryWrite(message.beginTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Timestamp endTime = 2; */
        if (message.endTime)
            Timestamp.internalBinaryWrite(message.endTime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated string pvNames = 3; */
        for (let i = 0; i < message.pvNames.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.pvNames[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryDataRequest.QuerySpec
 */
export const QueryDataRequest_QuerySpec = new QueryDataRequest_QuerySpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDataRequest_CursorOperation$Type extends MessageType {
    constructor() {
        super("QueryDataRequest.CursorOperation", [
            { no: 1, name: "cursorOperationType", kind: "enum", T: () => ["QueryDataRequest.CursorOperation.CursorOperationType", QueryDataRequest_CursorOperation_CursorOperationType] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.cursorOperationType = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QueryDataRequest.CursorOperation.CursorOperationType cursorOperationType */ 1:
                    message.cursorOperationType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* QueryDataRequest.CursorOperation.CursorOperationType cursorOperationType = 1; */
        if (message.cursorOperationType !== 0)
            writer.tag(1, WireType.Varint).int32(message.cursorOperationType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryDataRequest.CursorOperation
 */
export const QueryDataRequest_CursorOperation = new QueryDataRequest_CursorOperation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDataResponse$Type extends MessageType {
    constructor() {
        super("QueryDataResponse", [
            { no: 1, name: "responseTime", kind: "message", T: () => Timestamp },
            { no: 10, name: "exceptionalResult", kind: "message", oneof: "result", T: () => ExceptionalResult },
            { no: 11, name: "queryData", kind: "message", oneof: "result", T: () => QueryDataResponse_QueryData }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.result = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Timestamp responseTime */ 1:
                    message.responseTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.responseTime);
                    break;
                case /* ExceptionalResult exceptionalResult */ 10:
                    message.result = {
                        oneofKind: "exceptionalResult",
                        exceptionalResult: ExceptionalResult.internalBinaryRead(reader, reader.uint32(), options, message.result.exceptionalResult)
                    };
                    break;
                case /* QueryDataResponse.QueryData queryData */ 11:
                    message.result = {
                        oneofKind: "queryData",
                        queryData: QueryDataResponse_QueryData.internalBinaryRead(reader, reader.uint32(), options, message.result.queryData)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* Timestamp responseTime = 1; */
        if (message.responseTime)
            Timestamp.internalBinaryWrite(message.responseTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ExceptionalResult exceptionalResult = 10; */
        if (message.result.oneofKind === "exceptionalResult")
            ExceptionalResult.internalBinaryWrite(message.result.exceptionalResult, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* QueryDataResponse.QueryData queryData = 11; */
        if (message.result.oneofKind === "queryData")
            QueryDataResponse_QueryData.internalBinaryWrite(message.result.queryData, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryDataResponse
 */
export const QueryDataResponse = new QueryDataResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDataResponse_QueryData$Type extends MessageType {
    constructor() {
        super("QueryDataResponse.QueryData", [
            { no: 1, name: "dataBuckets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryDataResponse_QueryData_DataBucket }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.dataBuckets = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated QueryDataResponse.QueryData.DataBucket dataBuckets */ 1:
                    message.dataBuckets.push(QueryDataResponse_QueryData_DataBucket.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated QueryDataResponse.QueryData.DataBucket dataBuckets = 1; */
        for (let i = 0; i < message.dataBuckets.length; i++)
            QueryDataResponse_QueryData_DataBucket.internalBinaryWrite(message.dataBuckets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryDataResponse.QueryData
 */
export const QueryDataResponse_QueryData = new QueryDataResponse_QueryData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDataResponse_QueryData_DataBucket$Type extends MessageType {
    constructor() {
        super("QueryDataResponse.QueryData.DataBucket", [
            { no: 1, name: "dataTimestamps", kind: "message", T: () => DataTimestamps },
            { no: 2, name: "attributes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Attribute },
            { no: 3, name: "eventMetadata", kind: "message", T: () => EventMetadata },
            { no: 4, name: "dataColumn", kind: "message", T: () => DataColumn }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.attributes = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* DataTimestamps dataTimestamps */ 1:
                    message.dataTimestamps = DataTimestamps.internalBinaryRead(reader, reader.uint32(), options, message.dataTimestamps);
                    break;
                case /* repeated Attribute attributes */ 2:
                    message.attributes.push(Attribute.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* EventMetadata eventMetadata */ 3:
                    message.eventMetadata = EventMetadata.internalBinaryRead(reader, reader.uint32(), options, message.eventMetadata);
                    break;
                case /* DataColumn dataColumn */ 4:
                    message.dataColumn = DataColumn.internalBinaryRead(reader, reader.uint32(), options, message.dataColumn);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* DataTimestamps dataTimestamps = 1; */
        if (message.dataTimestamps)
            DataTimestamps.internalBinaryWrite(message.dataTimestamps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated Attribute attributes = 2; */
        for (let i = 0; i < message.attributes.length; i++)
            Attribute.internalBinaryWrite(message.attributes[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* EventMetadata eventMetadata = 3; */
        if (message.eventMetadata)
            EventMetadata.internalBinaryWrite(message.eventMetadata, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* DataColumn dataColumn = 4; */
        if (message.dataColumn)
            DataColumn.internalBinaryWrite(message.dataColumn, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryDataResponse.QueryData.DataBucket
 */
export const QueryDataResponse_QueryData_DataBucket = new QueryDataResponse_QueryData_DataBucket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTableResponse$Type extends MessageType {
    constructor() {
        super("QueryTableResponse", [
            { no: 1, name: "responseTime", kind: "message", T: () => Timestamp },
            { no: 10, name: "exceptionalResult", kind: "message", oneof: "result", T: () => ExceptionalResult },
            { no: 11, name: "tableResult", kind: "message", oneof: "result", T: () => QueryTableResponse_TableResult }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.result = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Timestamp responseTime */ 1:
                    message.responseTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.responseTime);
                    break;
                case /* ExceptionalResult exceptionalResult */ 10:
                    message.result = {
                        oneofKind: "exceptionalResult",
                        exceptionalResult: ExceptionalResult.internalBinaryRead(reader, reader.uint32(), options, message.result.exceptionalResult)
                    };
                    break;
                case /* QueryTableResponse.TableResult tableResult */ 11:
                    message.result = {
                        oneofKind: "tableResult",
                        tableResult: QueryTableResponse_TableResult.internalBinaryRead(reader, reader.uint32(), options, message.result.tableResult)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* Timestamp responseTime = 1; */
        if (message.responseTime)
            Timestamp.internalBinaryWrite(message.responseTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ExceptionalResult exceptionalResult = 10; */
        if (message.result.oneofKind === "exceptionalResult")
            ExceptionalResult.internalBinaryWrite(message.result.exceptionalResult, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* QueryTableResponse.TableResult tableResult = 11; */
        if (message.result.oneofKind === "tableResult")
            QueryTableResponse_TableResult.internalBinaryWrite(message.result.tableResult, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryTableResponse
 */
export const QueryTableResponse = new QueryTableResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTableResponse_TableResult$Type extends MessageType {
    constructor() {
        super("QueryTableResponse.TableResult", [
            { no: 1, name: "dataTimestamps", kind: "message", T: () => DataTimestamps },
            { no: 2, name: "dataColumns", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DataColumn }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.dataColumns = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* DataTimestamps dataTimestamps */ 1:
                    message.dataTimestamps = DataTimestamps.internalBinaryRead(reader, reader.uint32(), options, message.dataTimestamps);
                    break;
                case /* repeated DataColumn dataColumns */ 2:
                    message.dataColumns.push(DataColumn.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* DataTimestamps dataTimestamps = 1; */
        if (message.dataTimestamps)
            DataTimestamps.internalBinaryWrite(message.dataTimestamps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated DataColumn dataColumns = 2; */
        for (let i = 0; i < message.dataColumns.length; i++)
            DataColumn.internalBinaryWrite(message.dataColumns[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryTableResponse.TableResult
 */
export const QueryTableResponse_TableResult = new QueryTableResponse_TableResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryMetadataRequest$Type extends MessageType {
    constructor() {
        super("QueryMetadataRequest", [
            { no: 1, name: "querySpec", kind: "message", T: () => QueryMetadataRequest_QuerySpec }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QueryMetadataRequest.QuerySpec querySpec */ 1:
                    message.querySpec = QueryMetadataRequest_QuerySpec.internalBinaryRead(reader, reader.uint32(), options, message.querySpec);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* QueryMetadataRequest.QuerySpec querySpec = 1; */
        if (message.querySpec)
            QueryMetadataRequest_QuerySpec.internalBinaryWrite(message.querySpec, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryMetadataRequest
 */
export const QueryMetadataRequest = new QueryMetadataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryMetadataRequest_QuerySpec$Type extends MessageType {
    constructor() {
        super("QueryMetadataRequest.QuerySpec", [
            { no: 1, name: "pvNameList", kind: "message", oneof: "pvNameSpec", T: () => QueryMetadataRequest_QuerySpec_PvNameList },
            { no: 2, name: "pvNamePattern", kind: "message", oneof: "pvNameSpec", T: () => QueryMetadataRequest_QuerySpec_PvNamePattern }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pvNameSpec = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QueryMetadataRequest.QuerySpec.PvNameList pvNameList */ 1:
                    message.pvNameSpec = {
                        oneofKind: "pvNameList",
                        pvNameList: QueryMetadataRequest_QuerySpec_PvNameList.internalBinaryRead(reader, reader.uint32(), options, message.pvNameSpec.pvNameList)
                    };
                    break;
                case /* QueryMetadataRequest.QuerySpec.PvNamePattern pvNamePattern */ 2:
                    message.pvNameSpec = {
                        oneofKind: "pvNamePattern",
                        pvNamePattern: QueryMetadataRequest_QuerySpec_PvNamePattern.internalBinaryRead(reader, reader.uint32(), options, message.pvNameSpec.pvNamePattern)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* QueryMetadataRequest.QuerySpec.PvNameList pvNameList = 1; */
        if (message.pvNameSpec.oneofKind === "pvNameList")
            QueryMetadataRequest_QuerySpec_PvNameList.internalBinaryWrite(message.pvNameSpec.pvNameList, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* QueryMetadataRequest.QuerySpec.PvNamePattern pvNamePattern = 2; */
        if (message.pvNameSpec.oneofKind === "pvNamePattern")
            QueryMetadataRequest_QuerySpec_PvNamePattern.internalBinaryWrite(message.pvNameSpec.pvNamePattern, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryMetadataRequest.QuerySpec
 */
export const QueryMetadataRequest_QuerySpec = new QueryMetadataRequest_QuerySpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryMetadataRequest_QuerySpec_PvNameList$Type extends MessageType {
    constructor() {
        super("QueryMetadataRequest.QuerySpec.PvNameList", [
            { no: 1, name: "pvNames", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pvNames = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string pvNames */ 1:
                    message.pvNames.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string pvNames = 1; */
        for (let i = 0; i < message.pvNames.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.pvNames[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryMetadataRequest.QuerySpec.PvNameList
 */
export const QueryMetadataRequest_QuerySpec_PvNameList = new QueryMetadataRequest_QuerySpec_PvNameList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryMetadataRequest_QuerySpec_PvNamePattern$Type extends MessageType {
    constructor() {
        super("QueryMetadataRequest.QuerySpec.PvNamePattern", [
            { no: 1, name: "pattern", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pattern = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pattern */ 1:
                    message.pattern = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string pattern = 1; */
        if (message.pattern !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pattern);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryMetadataRequest.QuerySpec.PvNamePattern
 */
export const QueryMetadataRequest_QuerySpec_PvNamePattern = new QueryMetadataRequest_QuerySpec_PvNamePattern$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryMetadataResponse$Type extends MessageType {
    constructor() {
        super("QueryMetadataResponse", [
            { no: 1, name: "responseTime", kind: "message", T: () => Timestamp },
            { no: 10, name: "exceptionalResult", kind: "message", oneof: "result", T: () => ExceptionalResult },
            { no: 11, name: "metadataResult", kind: "message", oneof: "result", T: () => QueryMetadataResponse_MetadataResult }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.result = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Timestamp responseTime */ 1:
                    message.responseTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.responseTime);
                    break;
                case /* ExceptionalResult exceptionalResult */ 10:
                    message.result = {
                        oneofKind: "exceptionalResult",
                        exceptionalResult: ExceptionalResult.internalBinaryRead(reader, reader.uint32(), options, message.result.exceptionalResult)
                    };
                    break;
                case /* QueryMetadataResponse.MetadataResult metadataResult */ 11:
                    message.result = {
                        oneofKind: "metadataResult",
                        metadataResult: QueryMetadataResponse_MetadataResult.internalBinaryRead(reader, reader.uint32(), options, message.result.metadataResult)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* Timestamp responseTime = 1; */
        if (message.responseTime)
            Timestamp.internalBinaryWrite(message.responseTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ExceptionalResult exceptionalResult = 10; */
        if (message.result.oneofKind === "exceptionalResult")
            ExceptionalResult.internalBinaryWrite(message.result.exceptionalResult, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* QueryMetadataResponse.MetadataResult metadataResult = 11; */
        if (message.result.oneofKind === "metadataResult")
            QueryMetadataResponse_MetadataResult.internalBinaryWrite(message.result.metadataResult, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryMetadataResponse
 */
export const QueryMetadataResponse = new QueryMetadataResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryMetadataResponse_MetadataResult$Type extends MessageType {
    constructor() {
        super("QueryMetadataResponse.MetadataResult", [
            { no: 1, name: "pvInfos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryMetadataResponse_MetadataResult_PvInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pvInfos = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated QueryMetadataResponse.MetadataResult.PvInfo pvInfos */ 1:
                    message.pvInfos.push(QueryMetadataResponse_MetadataResult_PvInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated QueryMetadataResponse.MetadataResult.PvInfo pvInfos = 1; */
        for (let i = 0; i < message.pvInfos.length; i++)
            QueryMetadataResponse_MetadataResult_PvInfo.internalBinaryWrite(message.pvInfos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryMetadataResponse.MetadataResult
 */
export const QueryMetadataResponse_MetadataResult = new QueryMetadataResponse_MetadataResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryMetadataResponse_MetadataResult_PvInfo$Type extends MessageType {
    constructor() {
        super("QueryMetadataResponse.MetadataResult.PvInfo", [
            { no: 1, name: "pvName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "lastBucketDataType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lastSamplingClock", kind: "message", T: () => SamplingClock },
            { no: 5, name: "firstTimestamp", kind: "message", T: () => Timestamp },
            { no: 6, name: "lastTimestamp", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pvName = "";
        message.lastBucketDataType = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pvName */ 1:
                    message.pvName = reader.string();
                    break;
                case /* string lastBucketDataType */ 2:
                    message.lastBucketDataType = reader.string();
                    break;
                case /* SamplingClock lastSamplingClock */ 3:
                    message.lastSamplingClock = SamplingClock.internalBinaryRead(reader, reader.uint32(), options, message.lastSamplingClock);
                    break;
                case /* Timestamp firstTimestamp */ 5:
                    message.firstTimestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.firstTimestamp);
                    break;
                case /* Timestamp lastTimestamp */ 6:
                    message.lastTimestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastTimestamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string pvName = 1; */
        if (message.pvName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pvName);
        /* string lastBucketDataType = 2; */
        if (message.lastBucketDataType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.lastBucketDataType);
        /* SamplingClock lastSamplingClock = 3; */
        if (message.lastSamplingClock)
            SamplingClock.internalBinaryWrite(message.lastSamplingClock, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Timestamp firstTimestamp = 5; */
        if (message.firstTimestamp)
            Timestamp.internalBinaryWrite(message.firstTimestamp, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* Timestamp lastTimestamp = 6; */
        if (message.lastTimestamp)
            Timestamp.internalBinaryWrite(message.lastTimestamp, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryMetadataResponse.MetadataResult.PvInfo
 */
export const QueryMetadataResponse_MetadataResult_PvInfo = new QueryMetadataResponse_MetadataResult_PvInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAnnotationsRequest$Type extends MessageType {
    constructor() {
        super("QueryAnnotationsRequest", [
            { no: 1, name: "querySpec", kind: "message", T: () => QueryAnnotationsRequest_QuerySpec }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QueryAnnotationsRequest.QuerySpec querySpec */ 1:
                    message.querySpec = QueryAnnotationsRequest_QuerySpec.internalBinaryRead(reader, reader.uint32(), options, message.querySpec);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* QueryAnnotationsRequest.QuerySpec querySpec = 1; */
        if (message.querySpec)
            QueryAnnotationsRequest_QuerySpec.internalBinaryWrite(message.querySpec, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryAnnotationsRequest
 */
export const QueryAnnotationsRequest = new QueryAnnotationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAnnotationsRequest_QuerySpec$Type extends MessageType {
    constructor() {
        super("QueryAnnotationsRequest.QuerySpec", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryAnnotationsRequest.QuerySpec
 */
export const QueryAnnotationsRequest_QuerySpec = new QueryAnnotationsRequest_QuerySpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAnnotationsResponse$Type extends MessageType {
    constructor() {
        super("QueryAnnotationsResponse", [
            { no: 2, name: "responseTime", kind: "message", T: () => Timestamp },
            { no: 10, name: "exceptionalResult", kind: "message", oneof: "result", T: () => ExceptionalResult },
            { no: 11, name: "annotationsResult", kind: "message", oneof: "result", T: () => QueryAnnotationsResponse_AnnotationsResult }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.result = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Timestamp responseTime */ 2:
                    message.responseTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.responseTime);
                    break;
                case /* ExceptionalResult exceptionalResult */ 10:
                    message.result = {
                        oneofKind: "exceptionalResult",
                        exceptionalResult: ExceptionalResult.internalBinaryRead(reader, reader.uint32(), options, message.result.exceptionalResult)
                    };
                    break;
                case /* QueryAnnotationsResponse.AnnotationsResult annotationsResult */ 11:
                    message.result = {
                        oneofKind: "annotationsResult",
                        annotationsResult: QueryAnnotationsResponse_AnnotationsResult.internalBinaryRead(reader, reader.uint32(), options, message.result.annotationsResult)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* Timestamp responseTime = 2; */
        if (message.responseTime)
            Timestamp.internalBinaryWrite(message.responseTime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ExceptionalResult exceptionalResult = 10; */
        if (message.result.oneofKind === "exceptionalResult")
            ExceptionalResult.internalBinaryWrite(message.result.exceptionalResult, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* QueryAnnotationsResponse.AnnotationsResult annotationsResult = 11; */
        if (message.result.oneofKind === "annotationsResult")
            QueryAnnotationsResponse_AnnotationsResult.internalBinaryWrite(message.result.annotationsResult, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryAnnotationsResponse
 */
export const QueryAnnotationsResponse = new QueryAnnotationsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAnnotationsResponse_AnnotationsResult$Type extends MessageType {
    constructor() {
        super("QueryAnnotationsResponse.AnnotationsResult", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QueryAnnotationsResponse.AnnotationsResult
 */
export const QueryAnnotationsResponse_AnnotationsResult = new QueryAnnotationsResponse_AnnotationsResult$Type();
/**
 * @generated ServiceType for protobuf service DpQueryService
 */
export const DpQueryService = new ServiceType("DpQueryService", [
    { name: "queryData", options: {}, I: QueryDataRequest, O: QueryDataResponse },
    { name: "queryDataTable", options: {}, I: QueryDataRequest, O: QueryTableResponse },
    { name: "queryDataStream", serverStreaming: true, options: {}, I: QueryDataRequest, O: QueryDataResponse },
    { name: "queryDataBidiStream", serverStreaming: true, clientStreaming: true, options: {}, I: QueryDataRequest, O: QueryDataResponse },
    { name: "queryMetadata", options: {}, I: QueryMetadataRequest, O: QueryMetadataResponse },
    { name: "queryAnnotations", options: {}, I: QueryAnnotationsRequest, O: QueryAnnotationsResponse }
]);
