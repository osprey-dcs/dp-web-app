// @generated by protobuf-ts 2.9.3 with parameter output_javascript_es2020
// @generated from protobuf file "query.proto" (package "dp.service.query", syntax proto3)
// tslint:disable
//
//
// query.proto
//
// Contains RPC messages and interface specific to the Query Service.
//
// since: February, 2024
// version: 1.2.0
//
//
// @generated by protobuf-ts 2.9.3 with parameter output_javascript_es2020
// @generated from protobuf file "query.proto" (package "dp.service.query", syntax proto3)
// tslint:disable
//
//
// query.proto
//
// Contains RPC messages and interface specific to the Query Service.
//
// since: February, 2024
// version: 1.2.0
//
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SamplingClock } from "./common";
import { DataValue } from "./common";
import { DataColumn } from "./common";
import { EventMetadata } from "./common";
import { Attribute } from "./common";
import { DataTimestamps } from "./common";
import { ExceptionalResult } from "./common";
import { Timestamp } from "./common";
/**
 * @generated from protobuf enum dp.service.query.QueryDataRequest.CursorOperation.CursorOperationType
 */
export var QueryDataRequest_CursorOperation_CursorOperationType;
(function (QueryDataRequest_CursorOperation_CursorOperationType) {
    /**
     * Specifies that the next query response message should be sent.
     *
     * @generated from protobuf enum value: CURSOR_OP_NEXT = 0;
     */
    QueryDataRequest_CursorOperation_CursorOperationType[QueryDataRequest_CursorOperation_CursorOperationType["CURSOR_OP_NEXT"] = 0] = "CURSOR_OP_NEXT";
})(QueryDataRequest_CursorOperation_CursorOperationType || (QueryDataRequest_CursorOperation_CursorOperationType = {}));
/**
 * @generated from protobuf enum dp.service.query.QueryTableRequest.TableResultFormat
 */
export var QueryTableRequest_TableResultFormat;
(function (QueryTableRequest_TableResultFormat) {
    /**
     * default value if not explicitly set
     *
     * @generated from protobuf enum value: TABLE_FORMAT_ROW_MAP = 0;
     */
    QueryTableRequest_TableResultFormat[QueryTableRequest_TableResultFormat["TABLE_FORMAT_ROW_MAP"] = 0] = "TABLE_FORMAT_ROW_MAP";
    /**
     * @generated from protobuf enum value: TABLE_FORMAT_COLUMN = 1;
     */
    QueryTableRequest_TableResultFormat[QueryTableRequest_TableResultFormat["TABLE_FORMAT_COLUMN"] = 1] = "TABLE_FORMAT_COLUMN";
})(QueryTableRequest_TableResultFormat || (QueryTableRequest_TableResultFormat = {}));
// @generated message type with reflection information, may provide speed optimized methods
class QueryDataRequest$Type extends MessageType {
    constructor() {
        super("dp.service.query.QueryDataRequest", [
            { no: 1, name: "querySpec", kind: "message", oneof: "request", T: () => QueryDataRequest_QuerySpec },
            { no: 2, name: "cursorOp", kind: "message", oneof: "request", T: () => QueryDataRequest_CursorOperation }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* dp.service.query.QueryDataRequest.QuerySpec querySpec */ 1:
                    message.request = {
                        oneofKind: "querySpec",
                        querySpec: QueryDataRequest_QuerySpec.internalBinaryRead(reader, reader.uint32(), options, message.request.querySpec)
                    };
                    break;
                case /* dp.service.query.QueryDataRequest.CursorOperation cursorOp */ 2:
                    message.request = {
                        oneofKind: "cursorOp",
                        cursorOp: QueryDataRequest_CursorOperation.internalBinaryRead(reader, reader.uint32(), options, message.request.cursorOp)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* dp.service.query.QueryDataRequest.QuerySpec querySpec = 1; */
        if (message.request.oneofKind === "querySpec")
            QueryDataRequest_QuerySpec.internalBinaryWrite(message.request.querySpec, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* dp.service.query.QueryDataRequest.CursorOperation cursorOp = 2; */
        if (message.request.oneofKind === "cursorOp")
            QueryDataRequest_CursorOperation.internalBinaryWrite(message.request.cursorOp, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.query.QueryDataRequest
 */
export const QueryDataRequest = new QueryDataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDataRequest_QuerySpec$Type extends MessageType {
    constructor() {
        super("dp.service.query.QueryDataRequest.QuerySpec", [
            { no: 1, name: "beginTime", kind: "message", T: () => Timestamp },
            { no: 2, name: "endTime", kind: "message", T: () => Timestamp },
            { no: 3, name: "pvNames", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pvNames = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Timestamp beginTime */ 1:
                    message.beginTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.beginTime);
                    break;
                case /* Timestamp endTime */ 2:
                    message.endTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endTime);
                    break;
                case /* repeated string pvNames */ 3:
                    message.pvNames.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* Timestamp beginTime = 1; */
        if (message.beginTime)
            Timestamp.internalBinaryWrite(message.beginTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Timestamp endTime = 2; */
        if (message.endTime)
            Timestamp.internalBinaryWrite(message.endTime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated string pvNames = 3; */
        for (let i = 0; i < message.pvNames.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.pvNames[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.query.QueryDataRequest.QuerySpec
 */
export const QueryDataRequest_QuerySpec = new QueryDataRequest_QuerySpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDataRequest_CursorOperation$Type extends MessageType {
    constructor() {
        super("dp.service.query.QueryDataRequest.CursorOperation", [
            { no: 1, name: "cursorOperationType", kind: "enum", T: () => ["dp.service.query.QueryDataRequest.CursorOperation.CursorOperationType", QueryDataRequest_CursorOperation_CursorOperationType] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.cursorOperationType = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* dp.service.query.QueryDataRequest.CursorOperation.CursorOperationType cursorOperationType */ 1:
                    message.cursorOperationType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* dp.service.query.QueryDataRequest.CursorOperation.CursorOperationType cursorOperationType = 1; */
        if (message.cursorOperationType !== 0)
            writer.tag(1, WireType.Varint).int32(message.cursorOperationType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.query.QueryDataRequest.CursorOperation
 */
export const QueryDataRequest_CursorOperation = new QueryDataRequest_CursorOperation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDataResponse$Type extends MessageType {
    constructor() {
        super("dp.service.query.QueryDataResponse", [
            { no: 1, name: "responseTime", kind: "message", T: () => Timestamp },
            { no: 10, name: "exceptionalResult", kind: "message", oneof: "result", T: () => ExceptionalResult },
            { no: 11, name: "queryData", kind: "message", oneof: "result", T: () => QueryDataResponse_QueryData }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.result = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Timestamp responseTime */ 1:
                    message.responseTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.responseTime);
                    break;
                case /* ExceptionalResult exceptionalResult */ 10:
                    message.result = {
                        oneofKind: "exceptionalResult",
                        exceptionalResult: ExceptionalResult.internalBinaryRead(reader, reader.uint32(), options, message.result.exceptionalResult)
                    };
                    break;
                case /* dp.service.query.QueryDataResponse.QueryData queryData */ 11:
                    message.result = {
                        oneofKind: "queryData",
                        queryData: QueryDataResponse_QueryData.internalBinaryRead(reader, reader.uint32(), options, message.result.queryData)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* Timestamp responseTime = 1; */
        if (message.responseTime)
            Timestamp.internalBinaryWrite(message.responseTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ExceptionalResult exceptionalResult = 10; */
        if (message.result.oneofKind === "exceptionalResult")
            ExceptionalResult.internalBinaryWrite(message.result.exceptionalResult, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* dp.service.query.QueryDataResponse.QueryData queryData = 11; */
        if (message.result.oneofKind === "queryData")
            QueryDataResponse_QueryData.internalBinaryWrite(message.result.queryData, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.query.QueryDataResponse
 */
export const QueryDataResponse = new QueryDataResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDataResponse_QueryData$Type extends MessageType {
    constructor() {
        super("dp.service.query.QueryDataResponse.QueryData", [
            { no: 1, name: "dataBuckets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryDataResponse_QueryData_DataBucket }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.dataBuckets = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated dp.service.query.QueryDataResponse.QueryData.DataBucket dataBuckets */ 1:
                    message.dataBuckets.push(QueryDataResponse_QueryData_DataBucket.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated dp.service.query.QueryDataResponse.QueryData.DataBucket dataBuckets = 1; */
        for (let i = 0; i < message.dataBuckets.length; i++)
            QueryDataResponse_QueryData_DataBucket.internalBinaryWrite(message.dataBuckets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.query.QueryDataResponse.QueryData
 */
export const QueryDataResponse_QueryData = new QueryDataResponse_QueryData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDataResponse_QueryData_DataBucket$Type extends MessageType {
    constructor() {
        super("dp.service.query.QueryDataResponse.QueryData.DataBucket", [
            { no: 1, name: "dataTimestamps", kind: "message", T: () => DataTimestamps },
            { no: 2, name: "attributes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Attribute },
            { no: 3, name: "eventMetadata", kind: "message", T: () => EventMetadata },
            { no: 4, name: "dataColumn", kind: "message", T: () => DataColumn }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.attributes = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* DataTimestamps dataTimestamps */ 1:
                    message.dataTimestamps = DataTimestamps.internalBinaryRead(reader, reader.uint32(), options, message.dataTimestamps);
                    break;
                case /* repeated Attribute attributes */ 2:
                    message.attributes.push(Attribute.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* EventMetadata eventMetadata */ 3:
                    message.eventMetadata = EventMetadata.internalBinaryRead(reader, reader.uint32(), options, message.eventMetadata);
                    break;
                case /* DataColumn dataColumn */ 4:
                    message.dataColumn = DataColumn.internalBinaryRead(reader, reader.uint32(), options, message.dataColumn);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* DataTimestamps dataTimestamps = 1; */
        if (message.dataTimestamps)
            DataTimestamps.internalBinaryWrite(message.dataTimestamps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated Attribute attributes = 2; */
        for (let i = 0; i < message.attributes.length; i++)
            Attribute.internalBinaryWrite(message.attributes[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* EventMetadata eventMetadata = 3; */
        if (message.eventMetadata)
            EventMetadata.internalBinaryWrite(message.eventMetadata, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* DataColumn dataColumn = 4; */
        if (message.dataColumn)
            DataColumn.internalBinaryWrite(message.dataColumn, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.query.QueryDataResponse.QueryData.DataBucket
 */
export const QueryDataResponse_QueryData_DataBucket = new QueryDataResponse_QueryData_DataBucket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTableRequest$Type extends MessageType {
    constructor() {
        super("dp.service.query.QueryTableRequest", [
            { no: 1, name: "format", kind: "enum", T: () => ["dp.service.query.QueryTableRequest.TableResultFormat", QueryTableRequest_TableResultFormat] },
            { no: 2, name: "beginTime", kind: "message", T: () => Timestamp },
            { no: 3, name: "endTime", kind: "message", T: () => Timestamp },
            { no: 11, name: "pvNameList", kind: "message", oneof: "pvNameSpec", T: () => PvNameList },
            { no: 12, name: "pvNamePattern", kind: "message", oneof: "pvNameSpec", T: () => PvNamePattern }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.format = 0;
        message.pvNameSpec = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* dp.service.query.QueryTableRequest.TableResultFormat format */ 1:
                    message.format = reader.int32();
                    break;
                case /* Timestamp beginTime */ 2:
                    message.beginTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.beginTime);
                    break;
                case /* Timestamp endTime */ 3:
                    message.endTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endTime);
                    break;
                case /* dp.service.query.PvNameList pvNameList */ 11:
                    message.pvNameSpec = {
                        oneofKind: "pvNameList",
                        pvNameList: PvNameList.internalBinaryRead(reader, reader.uint32(), options, message.pvNameSpec.pvNameList)
                    };
                    break;
                case /* dp.service.query.PvNamePattern pvNamePattern */ 12:
                    message.pvNameSpec = {
                        oneofKind: "pvNamePattern",
                        pvNamePattern: PvNamePattern.internalBinaryRead(reader, reader.uint32(), options, message.pvNameSpec.pvNamePattern)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* dp.service.query.QueryTableRequest.TableResultFormat format = 1; */
        if (message.format !== 0)
            writer.tag(1, WireType.Varint).int32(message.format);
        /* Timestamp beginTime = 2; */
        if (message.beginTime)
            Timestamp.internalBinaryWrite(message.beginTime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Timestamp endTime = 3; */
        if (message.endTime)
            Timestamp.internalBinaryWrite(message.endTime, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* dp.service.query.PvNameList pvNameList = 11; */
        if (message.pvNameSpec.oneofKind === "pvNameList")
            PvNameList.internalBinaryWrite(message.pvNameSpec.pvNameList, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* dp.service.query.PvNamePattern pvNamePattern = 12; */
        if (message.pvNameSpec.oneofKind === "pvNamePattern")
            PvNamePattern.internalBinaryWrite(message.pvNameSpec.pvNamePattern, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.query.QueryTableRequest
 */
export const QueryTableRequest = new QueryTableRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTableResponse$Type extends MessageType {
    constructor() {
        super("dp.service.query.QueryTableResponse", [
            { no: 1, name: "responseTime", kind: "message", T: () => Timestamp },
            { no: 10, name: "exceptionalResult", kind: "message", oneof: "result", T: () => ExceptionalResult },
            { no: 11, name: "tableResult", kind: "message", oneof: "result", T: () => QueryTableResponse_TableResult }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.result = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Timestamp responseTime */ 1:
                    message.responseTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.responseTime);
                    break;
                case /* ExceptionalResult exceptionalResult */ 10:
                    message.result = {
                        oneofKind: "exceptionalResult",
                        exceptionalResult: ExceptionalResult.internalBinaryRead(reader, reader.uint32(), options, message.result.exceptionalResult)
                    };
                    break;
                case /* dp.service.query.QueryTableResponse.TableResult tableResult */ 11:
                    message.result = {
                        oneofKind: "tableResult",
                        tableResult: QueryTableResponse_TableResult.internalBinaryRead(reader, reader.uint32(), options, message.result.tableResult)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* Timestamp responseTime = 1; */
        if (message.responseTime)
            Timestamp.internalBinaryWrite(message.responseTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ExceptionalResult exceptionalResult = 10; */
        if (message.result.oneofKind === "exceptionalResult")
            ExceptionalResult.internalBinaryWrite(message.result.exceptionalResult, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* dp.service.query.QueryTableResponse.TableResult tableResult = 11; */
        if (message.result.oneofKind === "tableResult")
            QueryTableResponse_TableResult.internalBinaryWrite(message.result.tableResult, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.query.QueryTableResponse
 */
export const QueryTableResponse = new QueryTableResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTableResponse_TableResult$Type extends MessageType {
    constructor() {
        super("dp.service.query.QueryTableResponse.TableResult", [
            { no: 1, name: "columnTable", kind: "message", oneof: "tableResult", T: () => QueryTableResponse_ColumnTable },
            { no: 2, name: "rowMapTable", kind: "message", oneof: "tableResult", T: () => QueryTableResponse_RowMapTable }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.tableResult = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* dp.service.query.QueryTableResponse.ColumnTable columnTable */ 1:
                    message.tableResult = {
                        oneofKind: "columnTable",
                        columnTable: QueryTableResponse_ColumnTable.internalBinaryRead(reader, reader.uint32(), options, message.tableResult.columnTable)
                    };
                    break;
                case /* dp.service.query.QueryTableResponse.RowMapTable rowMapTable */ 2:
                    message.tableResult = {
                        oneofKind: "rowMapTable",
                        rowMapTable: QueryTableResponse_RowMapTable.internalBinaryRead(reader, reader.uint32(), options, message.tableResult.rowMapTable)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* dp.service.query.QueryTableResponse.ColumnTable columnTable = 1; */
        if (message.tableResult.oneofKind === "columnTable")
            QueryTableResponse_ColumnTable.internalBinaryWrite(message.tableResult.columnTable, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* dp.service.query.QueryTableResponse.RowMapTable rowMapTable = 2; */
        if (message.tableResult.oneofKind === "rowMapTable")
            QueryTableResponse_RowMapTable.internalBinaryWrite(message.tableResult.rowMapTable, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.query.QueryTableResponse.TableResult
 */
export const QueryTableResponse_TableResult = new QueryTableResponse_TableResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTableResponse_ColumnTable$Type extends MessageType {
    constructor() {
        super("dp.service.query.QueryTableResponse.ColumnTable", [
            { no: 1, name: "dataTimestamps", kind: "message", T: () => DataTimestamps },
            { no: 2, name: "dataColumns", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DataColumn }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.dataColumns = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* DataTimestamps dataTimestamps */ 1:
                    message.dataTimestamps = DataTimestamps.internalBinaryRead(reader, reader.uint32(), options, message.dataTimestamps);
                    break;
                case /* repeated DataColumn dataColumns */ 2:
                    message.dataColumns.push(DataColumn.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* DataTimestamps dataTimestamps = 1; */
        if (message.dataTimestamps)
            DataTimestamps.internalBinaryWrite(message.dataTimestamps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated DataColumn dataColumns = 2; */
        for (let i = 0; i < message.dataColumns.length; i++)
            DataColumn.internalBinaryWrite(message.dataColumns[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.query.QueryTableResponse.ColumnTable
 */
export const QueryTableResponse_ColumnTable = new QueryTableResponse_ColumnTable$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTableResponse_RowMapTable$Type extends MessageType {
    constructor() {
        super("dp.service.query.QueryTableResponse.RowMapTable", [
            { no: 1, name: "columnNames", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rows", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryTableResponse_RowMapTable_DataRow }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.columnNames = [];
        message.rows = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string columnNames */ 1:
                    message.columnNames.push(reader.string());
                    break;
                case /* repeated dp.service.query.QueryTableResponse.RowMapTable.DataRow rows */ 2:
                    message.rows.push(QueryTableResponse_RowMapTable_DataRow.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string columnNames = 1; */
        for (let i = 0; i < message.columnNames.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.columnNames[i]);
        /* repeated dp.service.query.QueryTableResponse.RowMapTable.DataRow rows = 2; */
        for (let i = 0; i < message.rows.length; i++)
            QueryTableResponse_RowMapTable_DataRow.internalBinaryWrite(message.rows[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.query.QueryTableResponse.RowMapTable
 */
export const QueryTableResponse_RowMapTable = new QueryTableResponse_RowMapTable$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTableResponse_RowMapTable_DataRow$Type extends MessageType {
    constructor() {
        super("dp.service.query.QueryTableResponse.RowMapTable.DataRow", [
            { no: 1, name: "columnValues", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => DataValue } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.columnValues = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, DataValue> columnValues */ 1:
                    this.binaryReadMap1(message.columnValues, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap1(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = DataValue.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field dp.service.query.QueryTableResponse.RowMapTable.DataRow.columnValues");
            }
        }
        map[key ?? ""] = val ?? DataValue.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* map<string, DataValue> columnValues = 1; */
        for (let k of globalThis.Object.keys(message.columnValues)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            DataValue.internalBinaryWrite(message.columnValues[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.query.QueryTableResponse.RowMapTable.DataRow
 */
export const QueryTableResponse_RowMapTable_DataRow = new QueryTableResponse_RowMapTable_DataRow$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryMetadataRequest$Type extends MessageType {
    constructor() {
        super("dp.service.query.QueryMetadataRequest", [
            { no: 1, name: "pvNameList", kind: "message", oneof: "pvNameSpec", T: () => PvNameList },
            { no: 2, name: "pvNamePattern", kind: "message", oneof: "pvNameSpec", T: () => PvNamePattern }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pvNameSpec = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* dp.service.query.PvNameList pvNameList */ 1:
                    message.pvNameSpec = {
                        oneofKind: "pvNameList",
                        pvNameList: PvNameList.internalBinaryRead(reader, reader.uint32(), options, message.pvNameSpec.pvNameList)
                    };
                    break;
                case /* dp.service.query.PvNamePattern pvNamePattern */ 2:
                    message.pvNameSpec = {
                        oneofKind: "pvNamePattern",
                        pvNamePattern: PvNamePattern.internalBinaryRead(reader, reader.uint32(), options, message.pvNameSpec.pvNamePattern)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* dp.service.query.PvNameList pvNameList = 1; */
        if (message.pvNameSpec.oneofKind === "pvNameList")
            PvNameList.internalBinaryWrite(message.pvNameSpec.pvNameList, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* dp.service.query.PvNamePattern pvNamePattern = 2; */
        if (message.pvNameSpec.oneofKind === "pvNamePattern")
            PvNamePattern.internalBinaryWrite(message.pvNameSpec.pvNamePattern, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.query.QueryMetadataRequest
 */
export const QueryMetadataRequest = new QueryMetadataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryMetadataResponse$Type extends MessageType {
    constructor() {
        super("dp.service.query.QueryMetadataResponse", [
            { no: 1, name: "responseTime", kind: "message", T: () => Timestamp },
            { no: 10, name: "exceptionalResult", kind: "message", oneof: "result", T: () => ExceptionalResult },
            { no: 11, name: "metadataResult", kind: "message", oneof: "result", T: () => QueryMetadataResponse_MetadataResult }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.result = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Timestamp responseTime */ 1:
                    message.responseTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.responseTime);
                    break;
                case /* ExceptionalResult exceptionalResult */ 10:
                    message.result = {
                        oneofKind: "exceptionalResult",
                        exceptionalResult: ExceptionalResult.internalBinaryRead(reader, reader.uint32(), options, message.result.exceptionalResult)
                    };
                    break;
                case /* dp.service.query.QueryMetadataResponse.MetadataResult metadataResult */ 11:
                    message.result = {
                        oneofKind: "metadataResult",
                        metadataResult: QueryMetadataResponse_MetadataResult.internalBinaryRead(reader, reader.uint32(), options, message.result.metadataResult)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* Timestamp responseTime = 1; */
        if (message.responseTime)
            Timestamp.internalBinaryWrite(message.responseTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ExceptionalResult exceptionalResult = 10; */
        if (message.result.oneofKind === "exceptionalResult")
            ExceptionalResult.internalBinaryWrite(message.result.exceptionalResult, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* dp.service.query.QueryMetadataResponse.MetadataResult metadataResult = 11; */
        if (message.result.oneofKind === "metadataResult")
            QueryMetadataResponse_MetadataResult.internalBinaryWrite(message.result.metadataResult, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.query.QueryMetadataResponse
 */
export const QueryMetadataResponse = new QueryMetadataResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryMetadataResponse_MetadataResult$Type extends MessageType {
    constructor() {
        super("dp.service.query.QueryMetadataResponse.MetadataResult", [
            { no: 1, name: "pvInfos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryMetadataResponse_MetadataResult_PvInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pvInfos = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated dp.service.query.QueryMetadataResponse.MetadataResult.PvInfo pvInfos */ 1:
                    message.pvInfos.push(QueryMetadataResponse_MetadataResult_PvInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated dp.service.query.QueryMetadataResponse.MetadataResult.PvInfo pvInfos = 1; */
        for (let i = 0; i < message.pvInfos.length; i++)
            QueryMetadataResponse_MetadataResult_PvInfo.internalBinaryWrite(message.pvInfos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.query.QueryMetadataResponse.MetadataResult
 */
export const QueryMetadataResponse_MetadataResult = new QueryMetadataResponse_MetadataResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryMetadataResponse_MetadataResult_PvInfo$Type extends MessageType {
    constructor() {
        super("dp.service.query.QueryMetadataResponse.MetadataResult.PvInfo", [
            { no: 1, name: "pvName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "lastBucketDataType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lastSamplingClock", kind: "message", T: () => SamplingClock },
            { no: 4, name: "firstTimestamp", kind: "message", T: () => Timestamp },
            { no: 5, name: "lastTimestamp", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pvName = "";
        message.lastBucketDataType = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pvName */ 1:
                    message.pvName = reader.string();
                    break;
                case /* string lastBucketDataType */ 2:
                    message.lastBucketDataType = reader.string();
                    break;
                case /* SamplingClock lastSamplingClock */ 3:
                    message.lastSamplingClock = SamplingClock.internalBinaryRead(reader, reader.uint32(), options, message.lastSamplingClock);
                    break;
                case /* Timestamp firstTimestamp */ 4:
                    message.firstTimestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.firstTimestamp);
                    break;
                case /* Timestamp lastTimestamp */ 5:
                    message.lastTimestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastTimestamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string pvName = 1; */
        if (message.pvName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pvName);
        /* string lastBucketDataType = 2; */
        if (message.lastBucketDataType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.lastBucketDataType);
        /* SamplingClock lastSamplingClock = 3; */
        if (message.lastSamplingClock)
            SamplingClock.internalBinaryWrite(message.lastSamplingClock, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Timestamp firstTimestamp = 4; */
        if (message.firstTimestamp)
            Timestamp.internalBinaryWrite(message.firstTimestamp, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* Timestamp lastTimestamp = 5; */
        if (message.lastTimestamp)
            Timestamp.internalBinaryWrite(message.lastTimestamp, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.query.QueryMetadataResponse.MetadataResult.PvInfo
 */
export const QueryMetadataResponse_MetadataResult_PvInfo = new QueryMetadataResponse_MetadataResult_PvInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PvNameList$Type extends MessageType {
    constructor() {
        super("dp.service.query.PvNameList", [
            { no: 1, name: "pvNames", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pvNames = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string pvNames */ 1:
                    message.pvNames.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string pvNames = 1; */
        for (let i = 0; i < message.pvNames.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.pvNames[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.query.PvNameList
 */
export const PvNameList = new PvNameList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PvNamePattern$Type extends MessageType {
    constructor() {
        super("dp.service.query.PvNamePattern", [
            { no: 1, name: "pattern", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pattern = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pattern */ 1:
                    message.pattern = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string pattern = 1; */
        if (message.pattern !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pattern);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.query.PvNamePattern
 */
export const PvNamePattern = new PvNamePattern$Type();
/**
 * @generated ServiceType for protobuf service dp.service.query.DpQueryService
 */
export const DpQueryService = new ServiceType("dp.service.query.DpQueryService", [
    { name: "queryData", options: {}, I: QueryDataRequest, O: QueryDataResponse },
    { name: "queryDataStream", serverStreaming: true, options: {}, I: QueryDataRequest, O: QueryDataResponse },
    { name: "queryDataBidiStream", serverStreaming: true, clientStreaming: true, options: {}, I: QueryDataRequest, O: QueryDataResponse },
    { name: "queryTable", options: {}, I: QueryTableRequest, O: QueryTableResponse },
    { name: "queryMetadata", options: {}, I: QueryMetadataRequest, O: QueryMetadataResponse }
]);
