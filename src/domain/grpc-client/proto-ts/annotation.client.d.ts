// @generated by protobuf-ts 2.9.3 with parameter output_javascript_es2020
// @generated from protobuf file "annotation.proto" (syntax proto3)
// tslint:disable
//
//
// annotation.proto
//
// Contains RPC messages and interface specific to the Annotation Service.
//
// since: February, 2024
// version: 1.3.0
//
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { CreateAnnotationResponse } from "./annotation";
import type { CreateAnnotationRequest } from "./annotation";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 *
 * Annotation Service Interface
 *
 * Interface for annotating archived data.  Registered annotation authors can create and modify data
 * annotations.
 *
 * @generated from protobuf service DpAnnotationService
 */
export interface IDpAnnotationServiceClient {
    /**
     *
     * createComment: Add a comment annotation to a DataSet.
     *
     * This RPC sends a request to the annotation service to create an annotation with the specified parameters.
     * The annotation service performs validation, and for a valid request, attempts to create the annotation.
     * The response may indicate rejection, an error in handling the request, or successful handling of the request.
     * See CreateAnnotationResponse for more details.
     *
     * @generated from protobuf rpc: createAnnotation(CreateAnnotationRequest) returns (CreateAnnotationResponse);
     */
    createAnnotation(input: CreateAnnotationRequest, options?: RpcOptions): UnaryCall<CreateAnnotationRequest, CreateAnnotationResponse>;
}
/**
 *
 * Annotation Service Interface
 *
 * Interface for annotating archived data.  Registered annotation authors can create and modify data
 * annotations.
 *
 * @generated from protobuf service DpAnnotationService
 */
export declare class DpAnnotationServiceClient implements IDpAnnotationServiceClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     *
     * createComment: Add a comment annotation to a DataSet.
     *
     * This RPC sends a request to the annotation service to create an annotation with the specified parameters.
     * The annotation service performs validation, and for a valid request, attempts to create the annotation.
     * The response may indicate rejection, an error in handling the request, or successful handling of the request.
     * See CreateAnnotationResponse for more details.
     *
     * @generated from protobuf rpc: createAnnotation(CreateAnnotationRequest) returns (CreateAnnotationResponse);
     */
    createAnnotation(input: CreateAnnotationRequest, options?: RpcOptions): UnaryCall<CreateAnnotationRequest, CreateAnnotationResponse>;
}
