// @generated by protobuf-ts 2.9.3 with parameter output_javascript_es2020
// @generated from protobuf file "query.proto" (package "dp.service.query", syntax proto3)
// tslint:disable
//
//
// query.proto
//
// Contains RPC messages and interface specific to the Query Service.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { QueryMetadataResponse } from "./query";
import type { QueryMetadataRequest } from "./query";
import type { QueryTableResponse } from "./query";
import type { QueryTableRequest } from "./query";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { QueryDataResponse } from "./query";
import type { QueryDataRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 *
 * The Query Service Interface
 *
 * Defines RPC operations for data and metadata queries.
 *
 * @generated from protobuf service dp.service.query.DpQueryService
 */
export interface IDpQueryServiceClient {
    /**
     *
     * queryData: Unary (non-streaming) time series data query.
     *
     * Client sends a single QueryDataRequest with the query parameters, and receives a single QueryDataResponse with the
     * query results. The response may indicate rejection, error in handling, no data matching query, or otherwise
     * contains the data matching the query specification.
     *
     * @generated from protobuf rpc: queryData(dp.service.query.QueryDataRequest) returns (dp.service.query.QueryDataResponse);
     */
    queryData(input: QueryDataRequest, options?: RpcOptions): UnaryCall<QueryDataRequest, QueryDataResponse>;
    /**
     *
     * queryDataStream: Server-side streaming time series data query.
     *
     * Client sends a single QueryDataRequest with the query parameters, and receives a stream of QueryDataResponse
     * messages with the query results. The response may indicate rejection, error in handling, no data matching query,
     * or otherwise contains the data matching the query specification.  Results are sent in the response stream until
     * the MongoDB cursor for the query is exhausted, or an error is encountered in processing.
     *
     * The response stream is closed by the server in case of rejection, if there is an error in processing, or the
     * result cursor is exhausted.
     *
     * We expect this to be the best performing RPC for time series data query.
     *
     * @generated from protobuf rpc: queryDataStream(dp.service.query.QueryDataRequest) returns (stream dp.service.query.QueryDataResponse);
     */
    queryDataStream(input: QueryDataRequest, options?: RpcOptions): ServerStreamingCall<QueryDataRequest, QueryDataResponse>;
    /**
     *
     * queryDataBidiStream: Bidirectional streaming time series data query.
     *
     * Client sends a QueryDataRequest with the query parameters, and receives an initial QueryDataResponse message
     * with the query results.
     *
     * While the MongoDB cursor for the query result contains additional details, the client sends a QueryDataRequest
     * message with a CursorOperation payload to receive the next QueryDataResponse message in the stream.  This should
     * continue in a loop until the query result is exhausted.
     *
     * The server closes the response stream if a request is rejected, or when the result is exhausted or an error
     * is encountered.
     *
     * Each individual response may indicate rejection, error in handling, no data matching query, or otherwise
     * contains the data matching the query specification.
     *
     * @generated from protobuf rpc: queryDataBidiStream(stream dp.service.query.QueryDataRequest) returns (stream dp.service.query.QueryDataResponse);
     */
    queryDataBidiStream(options?: RpcOptions): DuplexStreamingCall<QueryDataRequest, QueryDataResponse>;
    /**
     *
     * queryTable: Unary (non-streaming) time series data query with tabular result.
     *
     * This time series data query returns its result in a tabular format, for use by the Data Platform web application.
     * The client sends a single QueryTableRequest with the query parameters and receives a single QueryTableResponse.
     * The response content may indicate an exception in handling such as rejection, database error, no data matching
     * query, or otherwise contains the tabular data matching the query specification.
     *
     * @generated from protobuf rpc: queryTable(dp.service.query.QueryTableRequest) returns (dp.service.query.QueryTableResponse);
     */
    queryTable(input: QueryTableRequest, options?: RpcOptions): UnaryCall<QueryTableRequest, QueryTableResponse>;
    /**
     *
     * queryMetadata: Unary (non-streaming) metadata query.
     *
     * This RPC is used by clients to learn about data sources (PVs/columns) available in the archive.  Client sends
     * a single QueryMetadataRequest with the query parameters, and receives a single QueryMetadataResponse
     * with the query results. The response may indicate rejection, error in handling, no data matching query, or
     * otherwise contains the data matching the query specification.
     *
     * @generated from protobuf rpc: queryMetadata(dp.service.query.QueryMetadataRequest) returns (dp.service.query.QueryMetadataResponse);
     */
    queryMetadata(input: QueryMetadataRequest, options?: RpcOptions): UnaryCall<QueryMetadataRequest, QueryMetadataResponse>;
}
/**
 *
 * The Query Service Interface
 *
 * Defines RPC operations for data and metadata queries.
 *
 * @generated from protobuf service dp.service.query.DpQueryService
 */
export declare class DpQueryServiceClient implements IDpQueryServiceClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     *
     * queryData: Unary (non-streaming) time series data query.
     *
     * Client sends a single QueryDataRequest with the query parameters, and receives a single QueryDataResponse with the
     * query results. The response may indicate rejection, error in handling, no data matching query, or otherwise
     * contains the data matching the query specification.
     *
     * @generated from protobuf rpc: queryData(dp.service.query.QueryDataRequest) returns (dp.service.query.QueryDataResponse);
     */
    queryData(input: QueryDataRequest, options?: RpcOptions): UnaryCall<QueryDataRequest, QueryDataResponse>;
    /**
     *
     * queryDataStream: Server-side streaming time series data query.
     *
     * Client sends a single QueryDataRequest with the query parameters, and receives a stream of QueryDataResponse
     * messages with the query results. The response may indicate rejection, error in handling, no data matching query,
     * or otherwise contains the data matching the query specification.  Results are sent in the response stream until
     * the MongoDB cursor for the query is exhausted, or an error is encountered in processing.
     *
     * The response stream is closed by the server in case of rejection, if there is an error in processing, or the
     * result cursor is exhausted.
     *
     * We expect this to be the best performing RPC for time series data query.
     *
     * @generated from protobuf rpc: queryDataStream(dp.service.query.QueryDataRequest) returns (stream dp.service.query.QueryDataResponse);
     */
    queryDataStream(input: QueryDataRequest, options?: RpcOptions): ServerStreamingCall<QueryDataRequest, QueryDataResponse>;
    /**
     *
     * queryDataBidiStream: Bidirectional streaming time series data query.
     *
     * Client sends a QueryDataRequest with the query parameters, and receives an initial QueryDataResponse message
     * with the query results.
     *
     * While the MongoDB cursor for the query result contains additional details, the client sends a QueryDataRequest
     * message with a CursorOperation payload to receive the next QueryDataResponse message in the stream.  This should
     * continue in a loop until the query result is exhausted.
     *
     * The server closes the response stream if a request is rejected, or when the result is exhausted or an error
     * is encountered.
     *
     * Each individual response may indicate rejection, error in handling, no data matching query, or otherwise
     * contains the data matching the query specification.
     *
     * @generated from protobuf rpc: queryDataBidiStream(stream dp.service.query.QueryDataRequest) returns (stream dp.service.query.QueryDataResponse);
     */
    queryDataBidiStream(options?: RpcOptions): DuplexStreamingCall<QueryDataRequest, QueryDataResponse>;
    /**
     *
     * queryTable: Unary (non-streaming) time series data query with tabular result.
     *
     * This time series data query returns its result in a tabular format, for use by the Data Platform web application.
     * The client sends a single QueryTableRequest with the query parameters and receives a single QueryTableResponse.
     * The response content may indicate an exception in handling such as rejection, database error, no data matching
     * query, or otherwise contains the tabular data matching the query specification.
     *
     * @generated from protobuf rpc: queryTable(dp.service.query.QueryTableRequest) returns (dp.service.query.QueryTableResponse);
     */
    queryTable(input: QueryTableRequest, options?: RpcOptions): UnaryCall<QueryTableRequest, QueryTableResponse>;
    /**
     *
     * queryMetadata: Unary (non-streaming) metadata query.
     *
     * This RPC is used by clients to learn about data sources (PVs/columns) available in the archive.  Client sends
     * a single QueryMetadataRequest with the query parameters, and receives a single QueryMetadataResponse
     * with the query results. The response may indicate rejection, error in handling, no data matching query, or
     * otherwise contains the data matching the query specification.
     *
     * @generated from protobuf rpc: queryMetadata(dp.service.query.QueryMetadataRequest) returns (dp.service.query.QueryMetadataResponse);
     */
    queryMetadata(input: QueryMetadataRequest, options?: RpcOptions): UnaryCall<QueryMetadataRequest, QueryMetadataResponse>;
}
