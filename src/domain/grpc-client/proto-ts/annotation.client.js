// @generated by protobuf-ts 2.9.3 with parameter output_javascript_es2020
// @generated from protobuf file "annotation.proto" (package "dp.service.annotation", syntax proto3)
// tslint:disable
//
//
// annotation.proto
//
// Contains RPC messages and interface specific to the Annotation Service.
//
// since: February, 2024
// version: 1.3.0
//
//
import { DpAnnotationService } from "./annotation";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
// 
// ------------------- RPC Interfaces ---------------------------
// 
/**
 *
 * Annotation Service Interface
 *
 * Interface for annotating archived data.  Registered annotation authors can create and modify data
 * annotations.
 *
 * @generated from protobuf service dp.service.annotation.DpAnnotationService
 */
export class DpAnnotationServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = DpAnnotationService.typeName;
        this.methods = DpAnnotationService.methods;
        this.options = DpAnnotationService.options;
    }
    /**
     *
     * createDataSet: Create a DataSet.
     *
     * This RPC sends a request to the annotation service to create a DataSet with the specified parameters.
     * The annotation service performs validation, and for a valid request, attempts to create the DataSet.
     * The response may indicate rejection, an error in handling the request, or successful handling of the request.
     * See CreateDataSetResponse for more details.
     *
     * @generated from protobuf rpc: createDataSet(dp.service.annotation.CreateDataSetRequest) returns (dp.service.annotation.CreateDataSetResponse);
     */
    createDataSet(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     *
     * queryDataSets: Unary (non-streaming) data sets query.
     *
     * TODO: this API is not yet implemented
     *
     * @generated from protobuf rpc: queryDataSets(dp.service.annotation.QueryDataSetsRequest) returns (dp.service.annotation.QueryDataSetsResponse);
     */
    queryDataSets(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     *
     * createAnnotation: Add annotation to a DataSet.
     *
     * This RPC sends a request to the annotation service to create an annotation with the specified parameters.
     * The annotation service performs validation, and for a valid request, attempts to create the annotation.
     * The response may indicate rejection, an error in handling the request, or successful handling of the request.
     * See CreateAnnotationResponse for more details.
     *
     * @generated from protobuf rpc: createAnnotation(dp.service.annotation.CreateAnnotationRequest) returns (dp.service.annotation.CreateAnnotationResponse);
     */
    createAnnotation(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     *
     * queryAnnotations: Unary (non-streaming) annotations query.
     *
     * This RPC is used by clients to query over annotations added to ingested data, and is not yet implemented.
     * Client sends a single QueryAnnotationsRequest with the query parameters, and receives a single
     * QueryAnnotationsResponse with the query results. The response may indicate rejection, error in handling,
     * no data matching query, or otherwise contains the data matching the query specification.
     *
     * @generated from protobuf rpc: queryAnnotations(dp.service.annotation.QueryAnnotationsRequest) returns (dp.service.annotation.QueryAnnotationsResponse);
     */
    queryAnnotations(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
