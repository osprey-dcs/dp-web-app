// @generated by protobuf-ts 2.9.3 with parameter output_javascript_es2020
// @generated from protobuf file "annotation.proto" (package "dp.service.annotation", syntax proto3)
// tslint:disable
//
//
// annotation.proto
//
// Contains RPC messages and interface specific to the Annotation Service.
//
// since: February, 2024
// version: 1.3.0
//
//
// @generated by protobuf-ts 2.9.3 with parameter output_javascript_es2020
// @generated from protobuf file "annotation.proto" (package "dp.service.annotation", syntax proto3)
// tslint:disable
//
//
// annotation.proto
//
// Contains RPC messages and interface specific to the Annotation Service.
//
// since: February, 2024
// version: 1.3.0
//
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ExceptionalResult } from "./common";
import { Timestamp } from "./common";
import { Attribute } from "./common";
// @generated message type with reflection information, may provide speed optimized methods
class CreateAnnotationRequest$Type extends MessageType {
    constructor() {
        super("dp.service.annotation.CreateAnnotationRequest", [
            { no: 1, name: "authorId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "attributes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Attribute },
            { no: 4, name: "dataSet", kind: "message", T: () => DataSet },
            { no: 10, name: "commentDetails", kind: "message", oneof: "annotationTypeDetails", T: () => CreateAnnotationRequest_CommentDetails }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.authorId = 0;
        message.tags = [];
        message.attributes = [];
        message.annotationTypeDetails = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 authorId */ 1:
                    message.authorId = reader.uint32();
                    break;
                case /* repeated string tags */ 2:
                    message.tags.push(reader.string());
                    break;
                case /* repeated Attribute attributes */ 3:
                    message.attributes.push(Attribute.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* dp.service.annotation.DataSet dataSet */ 4:
                    message.dataSet = DataSet.internalBinaryRead(reader, reader.uint32(), options, message.dataSet);
                    break;
                case /* dp.service.annotation.CreateAnnotationRequest.CommentDetails commentDetails */ 10:
                    message.annotationTypeDetails = {
                        oneofKind: "commentDetails",
                        commentDetails: CreateAnnotationRequest_CommentDetails.internalBinaryRead(reader, reader.uint32(), options, message.annotationTypeDetails.commentDetails)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 authorId = 1; */
        if (message.authorId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.authorId);
        /* repeated string tags = 2; */
        for (let i = 0; i < message.tags.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.tags[i]);
        /* repeated Attribute attributes = 3; */
        for (let i = 0; i < message.attributes.length; i++)
            Attribute.internalBinaryWrite(message.attributes[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* dp.service.annotation.DataSet dataSet = 4; */
        if (message.dataSet)
            DataSet.internalBinaryWrite(message.dataSet, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* dp.service.annotation.CreateAnnotationRequest.CommentDetails commentDetails = 10; */
        if (message.annotationTypeDetails.oneofKind === "commentDetails")
            CreateAnnotationRequest_CommentDetails.internalBinaryWrite(message.annotationTypeDetails.commentDetails, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.annotation.CreateAnnotationRequest
 */
export const CreateAnnotationRequest = new CreateAnnotationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAnnotationRequest_CommentDetails$Type extends MessageType {
    constructor() {
        super("dp.service.annotation.CreateAnnotationRequest.CommentDetails", [
            { no: 1, name: "comment", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.comment = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string comment */ 1:
                    message.comment = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string comment = 1; */
        if (message.comment !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.comment);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.annotation.CreateAnnotationRequest.CommentDetails
 */
export const CreateAnnotationRequest_CommentDetails = new CreateAnnotationRequest_CommentDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAnnotationResponse$Type extends MessageType {
    constructor() {
        super("dp.service.annotation.CreateAnnotationResponse", [
            { no: 1, name: "responseTime", kind: "message", T: () => Timestamp },
            { no: 10, name: "exceptionalResult", kind: "message", oneof: "result", T: () => ExceptionalResult },
            { no: 11, name: "createAnnotationResult", kind: "message", oneof: "result", T: () => CreateAnnotationResponse_CreateAnnotationResult }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.result = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Timestamp responseTime */ 1:
                    message.responseTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.responseTime);
                    break;
                case /* ExceptionalResult exceptionalResult */ 10:
                    message.result = {
                        oneofKind: "exceptionalResult",
                        exceptionalResult: ExceptionalResult.internalBinaryRead(reader, reader.uint32(), options, message.result.exceptionalResult)
                    };
                    break;
                case /* dp.service.annotation.CreateAnnotationResponse.CreateAnnotationResult createAnnotationResult */ 11:
                    message.result = {
                        oneofKind: "createAnnotationResult",
                        createAnnotationResult: CreateAnnotationResponse_CreateAnnotationResult.internalBinaryRead(reader, reader.uint32(), options, message.result.createAnnotationResult)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* Timestamp responseTime = 1; */
        if (message.responseTime)
            Timestamp.internalBinaryWrite(message.responseTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ExceptionalResult exceptionalResult = 10; */
        if (message.result.oneofKind === "exceptionalResult")
            ExceptionalResult.internalBinaryWrite(message.result.exceptionalResult, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* dp.service.annotation.CreateAnnotationResponse.CreateAnnotationResult createAnnotationResult = 11; */
        if (message.result.oneofKind === "createAnnotationResult")
            CreateAnnotationResponse_CreateAnnotationResult.internalBinaryWrite(message.result.createAnnotationResult, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.annotation.CreateAnnotationResponse
 */
export const CreateAnnotationResponse = new CreateAnnotationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAnnotationResponse_CreateAnnotationResult$Type extends MessageType {
    constructor() {
        super("dp.service.annotation.CreateAnnotationResponse.CreateAnnotationResult", [
            { no: 1, name: "annotationId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.annotationId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string annotationId */ 1:
                    message.annotationId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string annotationId = 1; */
        if (message.annotationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.annotationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.annotation.CreateAnnotationResponse.CreateAnnotationResult
 */
export const CreateAnnotationResponse_CreateAnnotationResult = new CreateAnnotationResponse_CreateAnnotationResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DataSet$Type extends MessageType {
    constructor() {
        super("dp.service.annotation.DataSet", [
            { no: 1, name: "dataBlocks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DataBlock }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.dataBlocks = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated dp.service.annotation.DataBlock dataBlocks */ 1:
                    message.dataBlocks.push(DataBlock.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated dp.service.annotation.DataBlock dataBlocks = 1; */
        for (let i = 0; i < message.dataBlocks.length; i++)
            DataBlock.internalBinaryWrite(message.dataBlocks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.annotation.DataSet
 */
export const DataSet = new DataSet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DataBlock$Type extends MessageType {
    constructor() {
        super("dp.service.annotation.DataBlock", [
            { no: 1, name: "beginTime", kind: "message", T: () => Timestamp },
            { no: 2, name: "endTime", kind: "message", T: () => Timestamp },
            { no: 3, name: "pvNames", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pvNames = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Timestamp beginTime */ 1:
                    message.beginTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.beginTime);
                    break;
                case /* Timestamp endTime */ 2:
                    message.endTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endTime);
                    break;
                case /* repeated string pvNames */ 3:
                    message.pvNames.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* Timestamp beginTime = 1; */
        if (message.beginTime)
            Timestamp.internalBinaryWrite(message.beginTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Timestamp endTime = 2; */
        if (message.endTime)
            Timestamp.internalBinaryWrite(message.endTime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated string pvNames = 3; */
        for (let i = 0; i < message.pvNames.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.pvNames[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dp.service.annotation.DataBlock
 */
export const DataBlock = new DataBlock$Type();
/**
 * @generated ServiceType for protobuf service dp.service.annotation.DpAnnotationService
 */
export const DpAnnotationService = new ServiceType("dp.service.annotation.DpAnnotationService", [
    { name: "createAnnotation", options: {}, I: CreateAnnotationRequest, O: CreateAnnotationResponse }
]);
