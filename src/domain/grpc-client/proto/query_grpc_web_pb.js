/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.25.3
// source: query.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var common_pb = require('./common_pb.js')
const proto = require('./query_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.DpQueryServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.DpQueryServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.QueryDataRequest,
 *   !proto.QueryDataResponse>}
 */
const methodDescriptor_DpQueryService_queryData = new grpc.web.MethodDescriptor(
  '/DpQueryService/queryData',
  grpc.web.MethodType.UNARY,
  proto.QueryDataRequest,
  proto.QueryDataResponse,
  /**
   * @param {!proto.QueryDataRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.QueryDataResponse.deserializeBinary
);


/**
 * @param {!proto.QueryDataRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.QueryDataResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.QueryDataResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DpQueryServiceClient.prototype.queryData =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DpQueryService/queryData',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryData,
      callback);
};


/**
 * @param {!proto.QueryDataRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.QueryDataResponse>}
 *     Promise that resolves to the response
 */
proto.DpQueryServicePromiseClient.prototype.queryData =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DpQueryService/queryData',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryData);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.QueryDataRequest,
 *   !proto.QueryTableResponse>}
 */
const methodDescriptor_DpQueryService_queryDataTable = new grpc.web.MethodDescriptor(
  '/DpQueryService/queryDataTable',
  grpc.web.MethodType.UNARY,
  proto.QueryDataRequest,
  proto.QueryTableResponse,
  /**
   * @param {!proto.QueryDataRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.QueryTableResponse.deserializeBinary
);


/**
 * @param {!proto.QueryDataRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.QueryTableResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.QueryTableResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DpQueryServiceClient.prototype.queryDataTable =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DpQueryService/queryDataTable',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryDataTable,
      callback);
};


/**
 * @param {!proto.QueryDataRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.QueryTableResponse>}
 *     Promise that resolves to the response
 */
proto.DpQueryServicePromiseClient.prototype.queryDataTable =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DpQueryService/queryDataTable',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryDataTable);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.QueryDataRequest,
 *   !proto.QueryDataResponse>}
 */
const methodDescriptor_DpQueryService_queryDataStream = new grpc.web.MethodDescriptor(
  '/DpQueryService/queryDataStream',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.QueryDataRequest,
  proto.QueryDataResponse,
  /**
   * @param {!proto.QueryDataRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.QueryDataResponse.deserializeBinary
);


/**
 * @param {!proto.QueryDataRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.QueryDataResponse>}
 *     The XHR Node Readable Stream
 */
proto.DpQueryServiceClient.prototype.queryDataStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/DpQueryService/queryDataStream',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryDataStream);
};


/**
 * @param {!proto.QueryDataRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.QueryDataResponse>}
 *     The XHR Node Readable Stream
 */
proto.DpQueryServicePromiseClient.prototype.queryDataStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/DpQueryService/queryDataStream',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryDataStream);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.QueryMetadataRequest,
 *   !proto.QueryMetadataResponse>}
 */
const methodDescriptor_DpQueryService_queryMetadata = new grpc.web.MethodDescriptor(
  '/DpQueryService/queryMetadata',
  grpc.web.MethodType.UNARY,
  proto.QueryMetadataRequest,
  proto.QueryMetadataResponse,
  /**
   * @param {!proto.QueryMetadataRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.QueryMetadataResponse.deserializeBinary
);


/**
 * @param {!proto.QueryMetadataRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.QueryMetadataResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.QueryMetadataResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DpQueryServiceClient.prototype.queryMetadata =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DpQueryService/queryMetadata',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryMetadata,
      callback);
};


/**
 * @param {!proto.QueryMetadataRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.QueryMetadataResponse>}
 *     Promise that resolves to the response
 */
proto.DpQueryServicePromiseClient.prototype.queryMetadata =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DpQueryService/queryMetadata',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryMetadata);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.QueryAnnotationsRequest,
 *   !proto.QueryAnnotationsResponse>}
 */
const methodDescriptor_DpQueryService_queryAnnotations = new grpc.web.MethodDescriptor(
  '/DpQueryService/queryAnnotations',
  grpc.web.MethodType.UNARY,
  proto.QueryAnnotationsRequest,
  proto.QueryAnnotationsResponse,
  /**
   * @param {!proto.QueryAnnotationsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.QueryAnnotationsResponse.deserializeBinary
);


/**
 * @param {!proto.QueryAnnotationsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.QueryAnnotationsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.QueryAnnotationsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DpQueryServiceClient.prototype.queryAnnotations =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DpQueryService/queryAnnotations',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryAnnotations,
      callback);
};


/**
 * @param {!proto.QueryAnnotationsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.QueryAnnotationsResponse>}
 *     Promise that resolves to the response
 */
proto.DpQueryServicePromiseClient.prototype.queryAnnotations =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DpQueryService/queryAnnotations',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryAnnotations);
};


module.exports = proto;

