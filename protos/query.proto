//
// query.proto
//
// Contains RPC messages and interface specific to the Query Service.
//
// since: February, 2024
// version: 1.2.0
//

syntax = "proto3";

package dp.service.query;

option java_multiple_files = true;
option java_package = "com.ospreydcs.dp.grpc.v1.query";

import "common.proto";


//
// ------------------- RPC Interfaces ---------------------------
//

/*
 * The Query Service Interface
 *
 * Defines RPC operations for data, metadata, and annotation queries.
 */
service DpQueryService {

  /*
   * queryData: Unary (non-streaming) time series data query.
   *
   * Client sends a single QueryDataRequest with the query parameters, and receives a single QueryDataResponse with the
   * query results. The response may indicate rejection, error in handling, no data matching query, or otherwise
   * contains the data matching the query specification.
   */
  rpc queryData(QueryDataRequest) returns (QueryDataResponse);

  /*
   * queryDataStream: Server-side streaming time series data query.
   *
   * Client sends a single QueryDataRequest with the query parameters, and receives a stream of QueryDataResponse
   * messages with the query results. The response may indicate rejection, error in handling, no data matching query,
   * or otherwise contains the data matching the query specification.  Results are sent in the response stream until
   * the MongoDB cursor for the query is exhausted, or an error is encountered in processing.
   *
   * The response stream is closed by the server in case of rejection, if there is an error in processing, or the
   * result cursor is exhausted.
   *
   * We expect this to be the best performing RPC for time series data query.
   */
  rpc queryDataStream(QueryDataRequest) returns (stream QueryDataResponse);

  /*
   * queryDataBidiStream: Bidirectional streaming time series data query.
   *
   * Client sends a QueryDataRequest with the query parameters, and receives an initial QueryDataResponse message
   * with the query results.
   *
   * While the MongoDB cursor for the query result contains additional details, the client sends a QueryDataRequest
   * message with a CursorOperation payload to receive the next QueryDataResponse message in the stream.  This should
   * continue in a loop until the query result is exhausted.
   *
   * The server closes the response stream if a request is rejected, or when the result is exhausted or an error
   * is encountered.
   *
   * Each individual response may indicate rejection, error in handling, no data matching query, or otherwise
   * contains the data matching the query specification.
   */
  rpc queryDataBidiStream(stream QueryDataRequest) returns (stream QueryDataResponse);

  /*
   * queryTable: Unary (non-streaming) time series data query with tabular result.
   *
   * This time series data query returns its result in a tabular format, for use by the Data Platform web application.
   * The client sends a single QueryTableRequest with the query parameters and receives a single QueryTableResponse.
   * The response content may indicate an exception in handling such as rejection, database error, no data matching
   * query, or otherwise contains the tabular data matching the query specification.
   */
  rpc queryTable(QueryTableRequest) returns (QueryTableResponse);

  /*
   * queryMetadata: Unary (non-streaming) metadata query.
   *
   * This RPC is used by clients to learn about data sources (PVs/columns) available in the archive.  Client sends
   * a single QueryMetadataRequest with the query parameters, and receives a single QueryMetadataResponse
   * with the query results. The response may indicate rejection, error in handling, no data matching query, or
   * otherwise contains the data matching the query specification.
   */
  rpc queryMetadata(QueryMetadataRequest) returns (QueryMetadataResponse);

}


//
// ------------------- Time Series Data Query ---------------------------
//

/*
 * Time Series Data Query Request.
 *
 * Describes the parameters for a time series data query.
 */
message QueryDataRequest {

  // request: Payload for initial request to all time series data queries is QuerySpec defining query paramters.
  // CursorOperation payload is used only for queryDataBidiStream() RPC to retrieve additional results after initial response.
  oneof request {
    QuerySpec querySpec = 1;
    CursorOperation cursorOp = 2;
  }

  /*
   * Time Series Data Query Spec
   *
   * Payload used to specify query parameters for all time series data query RPC methods.
   */
  message QuerySpec {
    Timestamp beginTime = 1; // Required, specifies query start time.
    Timestamp endTime = 2; // Required, specifies query end time.
    repeated string pvNames = 3; // Required, contains list of data source names to query for specified time range.
  }

  /*
   * Cursor Operation used as payload in subsequent requests in queryDataBidiStream() after initial request containing
   * QuerySpec to request additional results beyond initial response.
   */
  message CursorOperation {
    CursorOperationType cursorOperationType = 1;

    enum CursorOperationType {
      CURSOR_OP_NEXT = 0; // Specifies that the next query response message should be sent.
    }
  }
}

/*
 * Time Series Data Query Response.
 *
 * Contains results from a time series data query.  Used as single response to unary RPC methods, or as a stream in the
 * streaming RPC methods. Contains either ExceptionalResult indicating a problem handling the request, or QueryData
 * containing the data returned by the query.
 */
message QueryDataResponse {

  Timestamp responseTime = 1; // Indicates time response was generated.

  // result: Response contains either an ExceptionalResult indicating a problem handling the request,
  // or QueryData with query result.
  oneof result {
    ExceptionalResult exceptionalResult = 10;
    QueryData queryData = 11;
  }

  /*
   * Time Series Query Result Data.
   *
   * Contains the data for a time series data query result, as a list of DataBucket objects.
   */
  message QueryData {

    repeated DataBucket dataBuckets = 1;

    message DataBucket {
      DataTimestamps dataTimestamps = 1; // Specifies timestamps for bucket, using SamplingClock or explicit Timestamp list
      repeated Attribute attributes = 2; // Specifies list of key/value attributes for bucket, if any.
      EventMetadata eventMetadata = 3; // Specifies event/snapshot metadata for bucket, if any.
      DataColumn dataColumn = 4; // Vector of column data for bucket.
    }
  }
}

/*
 * Time Series Data Query With Tabular Result Format.
 *
 * Describes the parameters for a time series data query that returns data in a tabular format.  The request format
 * is used to specify either row-oriented or column-oriented tabular result format.  Time range must be specified
 * using begin/endTime fields.  PV names are specified using either an explicit pvNameList or a pvNamePattern
 * matched by regex.
 */
message QueryTableRequest {

  TableResultFormat format = 1; // Required, specifies table result format.
  Timestamp beginTime = 2; // Required, specifies query start time.
  Timestamp endTime = 3; // Required, specifies query end time.

  // pvNameSpec: Contains either a list of column/PV names, or a single regex pattern string.
  oneof pvNameSpec {
    PvNameList pvNameList = 11;
    PvNamePattern pvNamePattern = 12;
  }

  enum TableResultFormat {
    TABLE_FORMAT_ROW_MAP = 0; // default value if not explicitly set
    TABLE_FORMAT_COLUMN = 1;
  }
}

/*
 * Tabular Time Series Data Query Response.
 *
 * Contains results from a time series data query in a tabular format for use by the DP web application (and other similar
 * uses. Response message payload is either an ExceptionalResult message indicating a rejection, error,
 * or empty query result, or a TableResult message containing the query result.  The TableResult is a ColumnTable
 * if request format is specified to be TABLE_FORMAT_COLUMN, or RowMapTable if format is TABLE_FORMAT_ROW_MAP.
 */
message QueryTableResponse {

  Timestamp responseTime = 1; // Indicates time response was generated.

  // result: Response contains either an ExceptionalResult indicating a problem handling the request,
  // or TableResult with query result.
  oneof result {
    ExceptionalResult exceptionalResult = 10;
    TableResult tableResult = 11;
  }

  /*
   * Tabular Time Series Query Result Content.
   *
   * Contains the data for a time series data query result, in a tabular format.
   */
  message TableResult {
    oneof tableResult {
      ColumnTable columnTable = 1;
      RowMapTable rowMapTable = 2;
    }
  }

  /*
   * Column-oriented table result with list of columns.
   */
  message ColumnTable {
    DataTimestamps dataTimestamps = 1; // Specifies the timestamps for the table, using an explicit list of times.
    repeated DataColumn dataColumns = 2; // Contains a list of columns, each with a name and vector of values one for each timestamp.
  }

  /*
   * Row-oriented table result where each row is a map whose keys are the column names and values are the column values
   * for that row.
   */
  message RowMapTable {
    repeated string columnNames = 1;
    repeated DataRow rows = 2;
    message DataRow {
      map<string, DataValue> columnValues = 1;
    }
  }
}


//
// ------------------- Metadata Query ---------------------------
//

/*
 * Metadata Query Request.
 *
 * Describes the parameters for a metadata query over available data sources in the archive.
 *
 * A request may contain one of two payloads, either a PvNameList with an explicit list of
 * column/PV names, or a regular expression pattern used to match against column/PV names.
 */
message QueryMetadataRequest {

  // pvNameSpec: Contains either a list of column/PV names, or a single regex pattern string.
  oneof pvNameSpec {
    PvNameList pvNameList = 1;
    PvNamePattern pvNamePattern = 2;
  }

}

/*
 * Metadata Query Response.
 *
 * Contains results from a metadata query. Response payload is ExceptionalResult if a rejection, error, or empty query
 * result is encountered, otherwise is MetadataResult containing results of query.
 */
message QueryMetadataResponse {

  Timestamp responseTime = 1; // Indicates time response was generated.

  // result: Response contains either an ExceptionalResult indicating a problem handling the request,
  // or MetadataResult with query result.
  oneof result {
    ExceptionalResult exceptionalResult = 10;
    MetadataResult metadataResult = 11;
  }

  /*
   * Metadata Query Result Content.
   *
   * Contains a list of PvInfo metadata objects, one for each column/PV name matching the query specification.
   */
  message MetadataResult {

    repeated PvInfo pvInfos = 1; // List of metadata objects matching query specificiation.

    message PvInfo {
      string pvName = 1; // Name of PV.
      string lastBucketDataType = 2; // Data type of last bucket for PV.
      SamplingClock lastSamplingClock = 3; // SamplingClock for last bucket for PV (only contains start time if bucket uses a list of timestamps).
      Timestamp firstTimestamp = 4; // Timestamp of first data value for PV.
      Timestamp lastTimestamp = 5; // Timestamp of last data value for PV.
    }
  }
}


message PvNameList {
  repeated string pvNames = 1; // Specifies list of column/PV names to match and return metadata for.
}

message PvNamePattern {
  string pattern = 1; // Specifies regex pattern to use for matching column/PV names to return metadata for.
}
